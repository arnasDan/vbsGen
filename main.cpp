#include <iostream>
#include <fstream>
#include <string>
#include <windows.h>
#include <shlobj.h>

using namespace std;

void mkdir(string pav);
void ivestis(string &pav, string &vieta);
void isvestisVbs(string vieta, string pav, string path);
void isvestisLnk(string pav, string path);
string pathFix(string vieta);
string exePath();

int main()
{
    bool repeat = true;
    while(repeat)
    {
        string pav, vieta, path;
        string yn;
        ivestis(pav, vieta);
        path = pav + "\\" + pav + ".vbs";
        mkdir(pav);
        isvestisVbs(vieta, pav, path);
        isvestisLnk(pav, path);
        cout << "Again? y/n" << endl;
        cin >> yn;
        while(yn != "y" && yn != "n")
        {
            yn.clear();
            cout << "y/n" << endl;
            cin >> yn;
        }
        if (yn == "y")
            repeat = true;
        else
            repeat = false;
        cin.clear();
        cin.ignore(256, '\n');
    }
    return 0;
}

void ivestis(string &pav, string &vieta)
{
    cout << "Program name: " << endl;
    getline(cin, pav);
    cout << "Path to its .exe:" << endl;
    getline(cin, vieta);
}

void mkdir(string pav)
{
    bool dirExists;
    DWORD ftyp = GetFileAttributesA((exePath() + pav).c_str());
    if (ftyp & FILE_ATTRIBUTE_DIRECTORY && ftyp != INVALID_FILE_ATTRIBUTES)
        dirExists = true;
    else dirExists = false;
    if (!dirExists)
    {
        string sys = "mkdir \"" + exePath() + pav + "\"";
        system(sys.c_str());
    }
    ftyp = GetFileAttributesA("C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\VBS");
    if (ftyp & FILE_ATTRIBUTE_DIRECTORY && ftyp != INVALID_FILE_ATTRIBUTES)
    {

    }
    else
    {
        system("mkdir \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\VBS\"");
        cout << "VBS directory successfuly created!" << endl;
    }
}

void isvestisVbs(string vieta, string pav, string path)
{
    path = exePath() + path;
    ofstream out(path.c_str());
    out << "CreateObject(\"WScript.Shell\").Run(\"\"\"" << vieta << "\"\"\")";
    cout << ".vbs created successfully!" << endl; //doesn't actually imply success
}

string pathFix(string vieta)
{
    int pos = 0;
    while (vieta.find("\\", pos) != string::npos)
    {
        pos = vieta.find("\\", pos);
        vieta.insert(pos, "\\");
        pos +=2;
    }
    return vieta;
}

void isvestisLnk(string pav, string path)
{
    path = pathFix(exePath() + path);
    //cout << path << endl;
    string lnkPath = pathFix("C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\VBS\\") + pav + ".lnk";
    //cout << lnkPath;
    const size_t Size = strlen(lnkPath.c_str())+1;
    wchar_t* Lnk = new wchar_t[Size];
    mbstowcs (Lnk, lnkPath.c_str(), Size);
    CoInitialize(NULL);
    IShellLink* pShellLink = NULL;
    HRESULT hres;
    hres = CoCreateInstance(CLSID_ShellLink, NULL, CLSCTX_ALL, IID_IShellLink, (void**)&pShellLink);
    //cout << hex << hres << endl;
    if (SUCCEEDED(hres))
    {
        pShellLink->SetPath(path.c_str());
        pShellLink->SetDescription("Generated by a shitty application");
        pShellLink->SetIconLocation(path.c_str(), 0);

        IPersistFile *pPersistFile;
        hres = pShellLink->QueryInterface(IID_IPersistFile, (void**)&pPersistFile);

        if (SUCCEEDED(hres))
        {
            cout << "Shortcut created successfully!" << endl; //doesn't actually imply success
            hres = pPersistFile->Save(Lnk, TRUE);
            pPersistFile->Release();
        }
        else
        {
            cout << "Failed to create shortcut!" << endl;
            return;
        }
        pShellLink->Release();
    }
    else
    {
        cout << "Failed to create shortcut!" << endl;
        return;
    }
    //outputResult(lnkPath);
}

string exePath() //wouldn't work with unicode symbols
{
  char result[MAX_PATH];
  string fullPath = string(result, GetModuleFileName(NULL, result, MAX_PATH));
  int pos = fullPath.find_last_of("\\");
  return fullPath.substr(0,pos+1);
}

void outputResult(string lnkPath) //not used
{
    DWORD ftyp = GetFileAttributesA(lnkPath.c_str());
    if (ftyp & FILE_ATTRIBUTE_DIRECTORY || ftyp == INVALID_FILE_ATTRIBUTES) //probably wrong
        cout << "Failed to create shortcut!" << endl;
    else cout << "Shorcut created successfully!" << endl;
}
